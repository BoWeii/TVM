C_x, C_y, C_k = tuple(C.op.axis) + tuple(C.op.reduce_axis)
C_local, = s.cache_write([C], "local")
C_local_x_c, C_local_y_c, C_local_k = tuple(C_local.op.axis) + tuple(C_local.op.reduce_axis)
C_local_x_c_o_i, C_local_x_c_i = s[C_local].split(C_local_x_c, factor=4)
C_local_x_c_o_o_i, C_local_x_c_o_i = s[C_local].split(C_local_x_c_o_i, factor=1)
C_local_x_c_o_o_o, C_local_x_c_o_o_i = s[C_local].split(C_local_x_c_o_o_i, factor=1)
C_local_y_c_o_i, C_local_y_c_i = s[C_local].split(C_local_y_c, factor=16)
C_local_y_c_o_o_i, C_local_y_c_o_i = s[C_local].split(C_local_y_c_o_i, factor=16)
C_local_y_c_o_o_o, C_local_y_c_o_o_i = s[C_local].split(C_local_y_c_o_o_i, factor=1)
C_local_k_o, C_local_k_i = s[C_local].split(C_local_k, factor=16)
s[C_local].reorder(C_local_x_c_o_o_o, C_local_y_c_o_o_o, C_local_x_c_o_o_i, C_local_y_c_o_o_i, C_local_k_o, C_local_x_c_o_i, C_local_y_c_o_i, C_local_k_i, C_local_x_c_i, C_local_y_c_i)
C_x_o, C_x_i = s[C].split(C_x, factor=4)
C_y_o, C_y_i = s[C].split(C_y, factor=256)
s[C].reorder(C_x_o, C_y_o, C_x_i, C_y_i)
s[C_local].compute_at(s[C], C_y_o)
C_x_o = s[C].fuse(C_x_o)
s[C].parallel(C_x_o)
s[C_local].pragma(C_local_x_c_o_o_o, "auto_unroll_max_step", 512)
s[C_local].pragma(C_local_x_c_o_o_o, "unroll_explicit", True)
s[C_local].vectorize(C_local_y_c_i)